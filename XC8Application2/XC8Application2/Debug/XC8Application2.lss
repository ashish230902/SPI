
XC8Application2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000fc  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000012b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008cf  00000000  00000000  0000015b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000639  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000203  00000000  00000000  00001063  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .text         00000004  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .text.SPI_SlaveInit 0000000e  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.SPI_SlaveReceive 0000000a  0000009a  0000009a  000000ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    0000000c  0000008e  0000008e  000000e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_SlaveInit:

00000080 <SPI_SlaveInit>:


void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDRB = (1<<DDB4);
  80:	80 e1       	ldi	r24, 0x10	; 16
  82:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI */
	SPCR = (1<<SPE);
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	8c bd       	out	0x2c, r24	; 44
	DDRD= (1<<DDD0);
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	8a b9       	out	0x0a, r24	; 10
  8c:	08 95       	ret

Disassembly of section .text.SPI_SlaveReceive:

0000009a <SPI_SlaveReceive>:

char SPI_SlaveReceive(void)
{    
    
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
  9a:	0d b4       	in	r0, 0x2d	; 45
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <SPI_SlaveReceive>
	;
	/* Return Data Register */
	
	return SPDR;
  a0:	8e b5       	in	r24, 0x2e	; 46
}
  a2:	08 95       	ret

Disassembly of section .text.main:

0000008e <main>:

int main(void)
{   unsigned char x;
	SPI_SlaveInit();
  8e:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
	
    while(1)
    {
	    x=SPI_SlaveReceive();
  92:	0e 94 4d 00 	call	0x9a	; 0x9a <SPI_SlaveReceive>
		PORTD = (x<<PORTD0);  
  96:	8b b9       	out	0x0b, r24	; 11
  98:	fc cf       	rjmp	.-8      	; 0x92 <main+0x4>
