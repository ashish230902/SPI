
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000015f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009df  00000000  00000000  0000018f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006e0  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000027d  00000000  00000000  0000124e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  000014cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000048  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000d8  000000d8  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.SPI_MasterInit 0000000e  000000c0  000000c0  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.SPI_MasterTransmit 0000000a  000000ce  000000ce  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000040  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_MasterInit:

000000c0 <SPI_MasterInit>:
#include <avr/io.h> //header to enable data flow control over pins. Defines pins, ports, etc.  

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK and CS output, all others input */
	DDRB = (1<<DDB3)|(1<<DDB5)|(1 << DDB2); // DDB3 IS MOSI AND DDB5 IS SCK
  c0:	8c e2       	ldi	r24, 0x2C	; 44
  c2:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  c4:	81 e5       	ldi	r24, 0x51	; 81
  c6:	8c bd       	out	0x2c, r24	; 44
	PORTB= (1<<PORTB2); //setting cs high
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

000000ce <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
  ce:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
  d0:	0d b4       	in	r0, 0x2d	; 45
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <SPI_MasterTransmit+0x2>
	;
}
  d6:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:

int main(void)
{ SPI_MasterInit(); //initiallising SPI master
  80:	0e 94 60 00 	call	0xc0	; 0xc0 <SPI_MasterInit>
    while(1)
    {
         
	         PORTB= 0<<PORTB2; //setting cs low
  84:	15 b8       	out	0x05, r1	; 5
	         SPI_MasterTransmit(69); // transmitting char 'a'
  86:	85 e4       	ldi	r24, 0x45	; 69
  88:	0e 94 67 00 	call	0xce	; 0xce <SPI_MasterTransmit>
			 PORTB= 1<<PORTB2; //setting cs high
  8c:	c4 e0       	ldi	r28, 0x04	; 4
  8e:	c5 b9       	out	0x05, r28	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	81 ee       	ldi	r24, 0xE1	; 225
  94:	94 e0       	ldi	r25, 0x04	; 4
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
	         _delay_ms(100);
			 PORTB= 0<<PORTB2; //setting cs low
  a2:	15 b8       	out	0x05, r1	; 5
	         SPI_MasterTransmit(0);// transmitting char 'b'
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 67 00 	call	0xce	; 0xce <SPI_MasterTransmit>
			 PORTB= 1<<PORTB2; //setting cs high
  aa:	c5 b9       	out	0x05, r28	; 5
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	81 ee       	ldi	r24, 0xE1	; 225
  b0:	94 e0       	ldi	r25, 0x04	; 4
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
  be:	e2 cf       	rjmp	.-60     	; 0x84 <main+0x4>
